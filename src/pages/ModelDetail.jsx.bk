import React, { useState, useEffect, useRef } from 'react';
import { 
  Card, 
  Form, 
  Input, 
  Select, 
  Button, 
  Typography, 
  Space, 
  message,
  Divider,
  Row,
  Col,
  Modal,
  Upload
} from 'antd';
import { 
  EditOutlined, 
  SaveOutlined, 
  SendOutlined,
  DeleteOutlined,
  ExclamationCircleOutlined,
  RobotOutlined,
  ArrowLeftOutlined,
  UploadOutlined,
  PictureOutlined,
  VideoCameraOutlined,
  PlusOutlined
} from '@ant-design/icons';
import TestResultDisplay from '../components/TestResultDisplay';
import MarkdownRenderer from '../components/MarkdownRenderer';  // 导入 MarkdownRenderer 组件
import { useParams, useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';

const { Title, Text, Paragraph } = Typography;
const { Option } = Select;
const { TextArea } = Input;

const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001';

// 预定义的API URL选项
const predefinedApiUrls = [
  { label: '自定义', value: '' },
  { label: '阿里云', value: 'https://dashscope.aliyuncs.com/compatible-mode/v1' },
  { label: 'DeepSeek', value: 'https://api.deepseek.com' }
];

const ModelDetail = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const { getToken, hasRole } = useAuth();
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);
  const [model, setModel] = useState(null);
  const [editing, setEditing] = useState(false);
  const [testInput, setTestInput] = useState('');
  const [testOutput, setTestOutput] = useState('');
  const [testing, setTesting] = useState(false);
  const [isStreaming, setIsStreaming] = useState(false);
  // 添加 system-prompt 相关状态
  const [systemPrompt, setSystemPrompt] = useState('');
  // 添加 markdown 预览相关状态
  const [examplePreviewMode, setExamplePreviewMode] = useState(false);
  // 添加缺失的状态
  const [selectedApiUrl, setSelectedApiUrl] = useState('');
  const [customApiUrl, setCustomApiUrl] = useState(true);
  // 文件上传相关状态
  const [fileList, setFileList] = useState([]);
  const [previewOpen, setPreviewOpen] = useState(false);
  const [previewImage, setPreviewImage] = useState('');
  const [previewTitle, setPreviewTitle] = useState('');
  const fileInputRef = useRef(null);

  const isNew = id === 'new';

  useEffect(() => {
    if (!isNew) {
      fetchModel();
    } else {
      setEditing(true);
    }
  }, [id]);

  // 添加缺失的处理函数
  const handleApiUrlChange = (value) => {
    setSelectedApiUrl(value);
    setCustomApiUrl(value === '');
    if (value !== '') {
      form.setFieldsValue({ access_url: value });
    }
  };

  // 在 fetchModel 函数中添加对 API URL 类型的处理
  const fetchModel = async () => {
    setLoading(true);
    try {
      const response = await fetch(`${API_BASE_URL}/api/models/${id}`);
      if (response.ok) {
        const data = await response.json();
        setModel(data);
        form.setFieldsValue(data);
        
        // 设置 API URL 类型
        const predefinedUrl = predefinedApiUrls.find(item => item.value === data.access_url);
        if (predefinedUrl) {
          setSelectedApiUrl(data.access_url);
          setCustomApiUrl(false);
        } else {
          setSelectedApiUrl('');
          setCustomApiUrl(true);
        }
      } else {
        message.error('获取模型信息失败');
        navigate('/models');
      }
    } catch (error) {
      message.error('网络错误，请稍后重试');
    } finally {
      setLoading(false);
    }
  };

  const handleSave = async (values) => {
    setSaving(true);
    try {
      const url = isNew 
        ? `${API_BASE_URL}/api/models`
        : `${API_BASE_URL}/api/models/${id}`;
      
      const response = await fetch(url, {
        method: isNew ? 'POST' : 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${getToken()}`
        },
        body: JSON.stringify(values)
      });

      if (response.ok) {
        const data = await response.json();
        message.success(isNew ? '模型创建成功' : '模型更新成功');
        
        if (isNew) {
          navigate(`/models/${data.id}`);
        } else {
          setModel(data);
          setEditing(false);
        }
      } else {
        const errorData = await response.json();
        message.error(errorData.error || '保存失败');
      }
    } catch (error) {
      message.error('网络错误，请稍后重试');
    } finally {
      setSaving(false);
    }
  };

  const handleTest = async () => {
    if (!testInput.trim()) {
      message.warning('请输入测试内容');
      return;
    }
  
    const currentFormValues = form.getFieldsValue();
    const accessUrl = currentFormValues.access_url || model?.access_url;
    const accessKey = currentFormValues.access_key || model?.access_key;
    const modelName = currentFormValues.model_name || model?.model_name;
    const modelType = currentFormValues.model_type || model?.model_type;
  
    if (!accessUrl || !accessKey || !modelName) {
      const missingFields = [];
      if (!accessUrl) missingFields.push('API URL');
      if (!accessKey) missingFields.push('API Key');
      if (!modelName) missingFields.push('模型名称');
      
      const errorMsg = `请先配置完整的模型信息，缺少：${missingFields.join('、')}`;
      message.error(errorMsg);
      setTestOutput(`配置错误: ${errorMsg}`);
      return;
    }
  
    if (modelType !== 'text') {
      const warningMsg = '当前仅支持文本模型的测试';
      message.warning(warningMsg);
      setTestOutput(`不支持的模型类型: ${modelType}\n${warningMsg}`);
      return;
    }
  
    setTesting(true);
    setIsStreaming(true);
    setTestOutput('');
  
    try {
      // 构建messages数组，如果有system-prompt则添加
      const messages = [];
      
      // 添加system消息（如果有）
      if (systemPrompt.trim()) {
        messages.push({
          role: 'system',
          content: systemPrompt
        });
      }
      
      // 添加用户消息
      messages.push({
        role: 'user',
        content: testInput
      });
      
      const requestBody = {
        model: modelName,
        messages: messages,
        stream: true,
        temperature: 0.7,
        max_tokens: 1000
      };

      const requestUrl = `${accessUrl}/chat/completions`;
      setTestOutput('正在连接API...\n\n');

      const response = await fetch(requestUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${accessKey}`
        },
        body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
        setIsStreaming(false);
        const errorText = await response.text();
        
        let errorMessage = 'API调用失败';
        try {
          const errorJson = JSON.parse(errorText);
          errorMessage = errorJson.error?.message || errorJson.message || errorMessage;
        } catch {
          errorMessage = `HTTP ${response.status}: ${response.statusText}`;
        }
        
        setTestOutput(`## 测试失败\n\n**错误信息:** ${errorMessage}\n\n**状态码:** ${response.status}\n\n**请检查:**\n- API URL 是否正确\n- API Key 是否有效\n- 模型名称是否正确\n- 网络连接是否正常`);
        message.error(errorMessage);
        return;
      }

      const reader = response.body.getReader();
      const decoder = new TextDecoder();
      let accumulatedContent = '';

      setTestOutput('## 测试结果\n\n');

      while (true) {
        const { done, value } = await reader.read();
        
        if (done) {
          setIsStreaming(false);
          break;
        }
        
        const chunk = decoder.decode(value, { stream: true });
        const lines = chunk.split('\n');
        
        for (const line of lines) {
          if (line.startsWith('data: ')) {
            const data = line.slice(6).trim();
            
            if (data === '[DONE]') {
              setIsStreaming(false);
              continue;
            }
            
            try {
              const parsed = JSON.parse(data);
              const content = parsed.choices?.[0]?.delta?.content;
              
              if (content) {
                accumulatedContent += content;
                setTestOutput(accumulatedContent);
              }
            } catch (e) {
              console.warn('JSON解析错误:', e.message);
            }
          }
        }
      }

      if (!accumulatedContent) {
        setTestOutput('模型返回了空响应，请检查输入内容或模型配置。');
        message.warning('模型返回了空响应');
      } else {
        message.success('测试完成');
      }

    } catch (error) {
      console.error('测试失败:', error);
      setIsStreaming(false);
      setTestOutput(`## 网络错误\n\n**错误信息:** ${error.message}\n\n**可能原因:**\n- 网络连接问题\n- CORS跨域限制\n- API服务不可用\n- 请求超时`);
      message.error(`网络错误: ${error.message}`);
    } finally {
      setTesting(false);
    }
  };

  // 添加文件预览处理函数
  const handlePreview = async (file) => {
    if (!file.url && !file.preview) {
      file.preview = await getBase64(file.originFileObj);
    }
    setPreviewImage(file.url || file.preview);
    setPreviewOpen(true);
    setPreviewTitle(file.name || file.url.substring(file.url.lastIndexOf('/') + 1));
  };

  // 添加文件列表更改处理函数
  const handleFileChange = ({ fileList: newFileList }) => {
    // 限制只能上传一个文件
    if (newFileList.length > 1) {
      message.warning('只能上传一个文件');
      return;
    }
    setFileList(newFileList);
  };

  // 添加文件删除处理函数
  const handleFileRemove = () => {
    setFileList([]);
  };

  // 文件转Base64辅助函数
  const getBase64 = (file) => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => resolve(reader.result);
      reader.onerror = error => reject(error);
    });
  };

  // 修改模型类型切换处理函数
  const handleModelTypeChange = (value) => {
    form.setFieldsValue({ model_type: value });
    // 当切换到非多模态模型时，清空已上传的文件
    if (value !== 'multimodal') {
      setFileList([]);
    }
  };
  
  // 修改handleTest函数支持多模态测试
  const handleTest = async () => {
    const currentFormValues = form.getFieldsValue();
    const accessUrl = currentFormValues.access_url || model?.access_url;
    const accessKey = currentFormValues.access_key || model?.access_key;
    const modelName = currentFormValues.model_name || model?.model_name;
    const modelType = currentFormValues.model_type || model?.model_type;

    if (!accessUrl || !accessKey || !modelName) {
      const missingFields = [];
      if (!accessUrl) missingFields.push('API URL');
      if (!accessKey) missingFields.push('API Key');
      if (!modelName) missingFields.push('模型名称');
      
      const errorMsg = `请先配置完整的模型信息，缺少：${missingFields.join('、')}`;
      message.error(errorMsg);
      setTestOutput(`配置错误: ${errorMsg}`);
      return;
    }

    // 修改：支持多模态模型的测试
    if (modelType !== 'text' && modelType !== 'multimodal') {
      const warningMsg = '当前仅支持文本模型和多模态模型的测试';
      message.warning(warningMsg);
      setTestOutput(`不支持的模型类型: ${modelType}\n${warningMsg}`);
      return;
    }
    
    // 检查多模态模型是否上传了文件
    if (modelType === 'multimodal' && fileList.length === 0 && testInput.trim() === '') {
      const warningMsg = '多模态模型测试需要提供文本输入或上传图片/视频文件';
      message.warning(warningMsg);
      setTestOutput(`测试错误: ${warningMsg}`);
      return;
    }

    setTesting(true);
    setIsStreaming(true);
    setTestOutput('');

    try {
      // 构建messages数组，如果有system-prompt则添加
      const messages = [];
      
      // 添加system消息（如果有）
      if (systemPrompt.trim()) {
        messages.push({
          role: 'system',
          content: systemPrompt
        });
      }
      
      // 构建消息内容
      if (modelType === 'multimodal' && fileList.length > 0) {
        // 多模态消息
        const file = fileList[0].originFileObj;
        const base64Data = await getBase64(file);
        
        const content = [
          { type: "text", text: testInput || "请描述这个图像/视频" }
        ];
        
        if (file.type.startsWith('image/')) {
          content.push({
            type: "image_url",
            image_url: {
              url: base64Data
            }
          });
        } else if (file.type.startsWith('video/')) {
          content.push({
            type: "video_url",
            video_url: {
              url: base64Data
            }
          });
        }
        
        messages.push({
          role: 'user',
          content: content
        });
      } else {
        // 纯文本消息
        if (!testInput.trim()) {
          message.warning('请输入测试内容');
          setTesting(false);
          setIsStreaming(false);
          return;
        }
        
        messages.push({
          role: 'user',
          content: testInput
        });
      }
      
      await sendRequest(messages, accessUrl, accessKey, modelName);
    } catch (error) {
      handleTestError(error);
    }
  };
  
  // 发送请求到API
  const sendRequest = async (messages, accessUrl, accessKey, modelName) => {
    const requestBody = {
      model: modelName,
      messages: messages,
      stream: true,
      temperature: 0.7,
      max_tokens: 1000
    };

    const requestUrl = `${accessUrl}/chat/completions`;
    setTestOutput('正在连接API...\n\n');

    const response = await fetch(requestUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${accessKey}`
      },
      body: JSON.stringify(requestBody)
    });

    if (!response.ok) {
      const errorText = await response.text();
      
      let errorMessage = 'API调用失败';
      try {
        const errorJson = JSON.parse(errorText);
        errorMessage = errorJson.error?.message || errorJson.message || errorMessage;
      } catch {
        errorMessage = `HTTP ${response.status}: ${response.statusText}`;
      }
      
      setIsStreaming(false);
      setTestOutput(`## 测试失败\n\n**错误信息:** ${errorMessage}\n\n**状态码:** ${response.status}\n\n**请检查:**\n- API URL 是否正确\n- API Key 是否有效\n- 模型名称是否正确\n- 网络连接是否正常`);
      message.error(errorMessage);
      return;
    }

    const reader = response.body.getReader();
    const decoder = new TextDecoder();
    let accumulatedContent = '';

    setTestOutput('## 测试结果\n\n');

    while (true) {
      const { done, value } = await reader.read();
      
      if (done) {
        setIsStreaming(false);
        break;
      }
      
      const chunk = decoder.decode(value, { stream: true });
      const lines = chunk.split('\n');
      
      for (const line of lines) {
        if (line.startsWith('data: ')) {
          const data = line.slice(6).trim();
          
          if (data === '[DONE]') {
            setIsStreaming(false);
            continue;
          }
          
          try {
            const parsed = JSON.parse(data);
            const content = parsed.choices?.[0]?.delta?.content;
            
            if (content) {
              accumulatedContent += content;
              setTestOutput(accumulatedContent);
            }
          } catch (e) {
            console.warn('JSON解析错误:', e.message);
          }
        }
      }
    }

    if (!accumulatedContent) {
      setTestOutput('模型返回了空响应，请检查输入内容或模型配置。');
      message.warning('模型返回了空响应');
    } else {
      message.success('测试完成');
    }
  };
  
  // 处理测试错误
  const handleTestError = (error) => {
    console.error('测试失败:', error);
    setIsStreaming(false);
    setTesting(false);
    setTestOutput(`## 网络错误\n\n**错误信息:** ${error.message}\n\n**可能原因:**\n- 网络连接问题\n- CORS跨域限制\n- API服务不可用\n- 请求超时`);
    message.error(`网络错误: ${error.message}`);
  };

  if (loading) {
    return <div style={{ textAlign: 'center', padding: '48px' }}>加载中...</div>;
  }

  return (
    <div>
      {/* 页面头部 */}
      <div style={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center',
        marginBottom: '24px' 
      }}>
        <Title level={2} style={{ margin: 0 }}>
          <RobotOutlined style={{ marginRight: '12px', color: '#1890ff' }} />
          {isNew ? '新增模型' : (editing ? '编辑模型' : model?.name)}
        </Title>
        <Button 
          icon={<ArrowLeftOutlined />} 
          onClick={() => navigate('/models')}
        >
          返回模型库
        </Button>
      </div>

      <Row gutter={[24, 24]}>
        {/* 模型测试 */}
        {!isNew && (
          <Col xs={24} lg={8}>
            <Card title="模型测试" style={{ height: 'fit-content' }} headStyle={{ textAlign: 'left' }}>
              <div style={{ marginBottom: '16px', textAlign: 'left' }}>
                <Text strong>System Prompt：</Text>
                <TextArea
                  rows={3}
                  placeholder="输入system-prompt（可选）..."
                  value={systemPrompt}
                  onChange={(e) => setSystemPrompt(e.target.value)}
                  style={{ marginTop: '8px', marginBottom: '16px' }}
                />
                
                <Text strong>测试输入：</Text>
                <TextArea
                  rows={4}
                  placeholder="请输入测试内容..."
                  value={testInput}
                  onChange={(e) => setTestInput(e.target.value)}
                  style={{ marginTop: '8px' }}
                />
                
                {/* 添加多模态文件上传区域 */}
                {form.getFieldValue('model_type') === 'multimodal' && (
                  <div style={{ marginTop: '16px' }}>
                    <Text strong>多模态文件上传：</Text>
                    <div style={{ marginTop: '8px' }}>
                      <Upload
                        listType="picture-card"
                        fileList={fileList}
                        onPreview={handlePreview}
                        onChange={handleFileChange}
                        beforeUpload={(file) => {
                          // 验证文件类型
                          const isImageOrVideo = file.type.startsWith('image/') || file.type.startsWith('video/');
                          if (!isImageOrVideo) {
                            message.error('只能上传图片或视频文件!');
                            return Upload.LIST_IGNORE;
                          }
                          // 验证文件大小
                          const isLt10M = file.size / 1024 / 1024 < 10;
                          if (!isLt10M) {
                            message.error('文件必须小于10MB!');
                            return Upload.LIST_IGNORE;
                          }
                          return false; // 阻止自动上传
                        }}
                        maxCount={1}
                      >
                        {fileList.length >= 1 ? null : (
                          <div>
                            <PlusOutlined />
                            <div style={{ marginTop: 8 }}>上传</div>
                          </div>
                        )}
                      </Upload>
                      <Modal
                        open={previewOpen}
                        title={previewTitle}
                        footer={null}
                        onCancel={() => setPreviewOpen(false)}
                      >
                        {previewImage.startsWith('data:image/') ? (
                          <img alt="预览图片" style={{ width: '100%' }} src={previewImage} />
                        ) : (
                          <video 
                            controls 
                            style={{ width: '100%' }} 
                            src={previewImage}
                          >
                            您的浏览器不支持视频标签
                          </video>
                        )}
                      </Modal>
                    </div>
                  </div>
                )}
              </div>
              
              <Button 
                type="primary" 
                icon={<SendOutlined />}
                loading={testing}
                onClick={handleTest}
                style={{ marginBottom: '16px', width: '100%' }}
              >
                发送测试
              </Button>

              <div style={{ marginTop: '16px' }}>
                <div style={{ marginTop: '8px' }}>
                  <TestResultDisplay 
                    output={testOutput}
                    isLoading={testing}
                    isStreaming={isStreaming}
                    onClear={() => setTestOutput('')}
                  />
                </div>
              </div>
            </Card>
          </Col>
        )}

        {/* 模型信息表单 */}
        <Col xs={24} lg={16}>
          <Card 
            title="模型信息"
            headStyle={{ textAlign: 'left' }}
            extra={
              !isNew && hasRole(['admin', 'developer']) && (
                <Space>
                  {/* ... existing code ... */}
                </Space>
              )
            }
          >
            <Form
              form={form}
              layout="vertical"
              onFinish={handleSave}
              disabled={!editing && !isNew}
            >
              <Row gutter={[16, 0]}>
                <Col xs={24} md={12}>
                  <Form.Item
                    label="模型名称"
                    name="name"
                    rules={[{ required: true, message: '请输入模型名称' }]}
                  >
                    <Input placeholder="请输入模型名称" />
                  </Form.Item>
                </Col>
                <Col xs={24} md={12}>
                  <Form.Item
                    label="模型类型"
                    name="model_type"
                    rules={[{ required: true, message: '请选择模型类型' }]}
                  >
                    <Select 
                      placeholder="请选择模型类型"
                      onChange={handleModelTypeChange}
                    >
                      <Option value="text">文本</Option>
                      <Option value="audio">语音</Option>
                      <Option value="multimodal">多模态</Option>
                      <Option value="text2image">文生图</Option>
                      <Option value="embedding">嵌入模型</Option>
                    </Select>
                  </Form.Item>
                </Col>
              </Row>
              
              <Row gutter={16}>
                <Col xs={24} sm={12}>
                  <Form.Item
                    name="provider"
                    label="发布机构"
                    rules={[{ required: true, message: '请输入发布机构' }]}
                  >
                    <Input placeholder="请输入发布机构" />
                  </Form.Item>
                </Col>
                <Col xs={24} sm={12}>
                  <Form.Item
                    name="model_name"
                    label="模型名称(Model Name)"
                    rules={[{ required: true, message: '请输入模型名称' }]}
                  >
                    <Input placeholder="OpenAI API中使用的模型名称，如gpt-4-vision-preview" />
                  </Form.Item>
                </Col>
              </Row>

              <Row gutter={16}>
                <Col xs={24} sm={12}>
                  <Form.Item
                    name="api_url_type"
                    label="API URL类型"
                    rules={[{ required: true, message: '请选择API URL类型' }]}
                  >
                    <Select
                      placeholder="请选择API URL类型"
                      options={[
                        { value: 'standard', label: '标准URL' },
                        { value: 'custom', label: '自定义URL' }
                      ]}
                      onChange={(value) => {
                        if (value === 'standard') {
                          form.setFieldsValue({ access_url: 'https://api.openai.com/v1' });
                        } else {
                          form.setFieldsValue({ access_url: '' });
                        }
                      }}
                    />
                  </Form.Item>
                </Col>
                <Col xs={24} sm={12}>
                  <Form.Item
                    name="access_url"
                    label="API地址"
                    rules={
                  >
                    <Input 
                      placeholder="https://api.example.com/v1/chat" 
                      disabled={!customApiUrl}
                    />
                  </Form.Item>
                </Col>
              </Row>

              <Form.Item
                label="API Key"
                name="access_key"
              >
                <Input.Password placeholder="请输入API密钥" />
              </Form.Item>

              <Form.Item
                label="模型描述"
                name="description"
              >
                {!editing ? (
                  <MarkdownRenderer
                    content={form.getFieldValue('description') || ''}
                    isStreaming={false}
                  />
                ) : (
                  <TextArea 
                    rows={4} 
                    placeholder="请输入模型的详细描述，包括功能特点、适用场景等（支持Markdown语法）"
                  />
                )}
              </Form.Item>

              <Row gutter={16}>
                <Col xs={24} sm={12}>
                  <Form.Item
                    label="输入格式"
                    name="input_format"
                  >
                    <TextArea 
                      rows={3} 
                      placeholder="描述模型的输入格式，例如JSON结构等"
                    />
                  </Form.Item>
                </Col>
                <Col xs={24} sm={12}>
                  <Form.Item
                    label="输出格式"
                    name="output_format"
                  >
                    <TextArea 
                      rows={3} 
                      placeholder="描述模型的输出格式"
                    />
                  </Form.Item>
                </Col>
              </Row>

              <Form.Item
                label="使用示例"
                name="example"
              >
                <div style={{ position: 'relative' }}>
                  {!examplePreviewMode ? (
                    <TextArea 
                      rows={4} 
                      placeholder="提供模型使用的具体示例（支持Markdown语法）"
                    />
                  ) : (
                    <MarkdownRenderer
                      content={form.getFieldValue('example') || ''}
                      isStreaming={false}
                    />
                  )}
                  <Button
                    onClick={() => setExamplePreviewMode(!examplePreviewMode)}
                    size="small"
                    style={{
                      position: 'absolute',
                      top: '8px',
                      right: '8px',
                      zIndex: 1
                    }}
                  >
                    {examplePreviewMode ? '编辑' : '预览'}
                  </Button>
                </div>
              </Form.Item>

              {(editing || isNew) && (
                <Form.Item>
                  <Space>
                    <Button 
                      type="primary" 
                      htmlType="submit" 
                      icon={<SaveOutlined />}
                      loading={saving}
                    >
                      {isNew ? '创建模型' : '保存修改'}
                    </Button>
                    <Button onClick={() => {
                      if (isNew) {
                        navigate('/models');
                      } else {
                        setEditing(false);
                        form.resetFields();
                        form.setFieldsValue(model);
                      }
                    }}>
                      取消
                    </Button>
                  </Space>
                </Form.Item>
              )}
            </Form>
            </Card>
          </Col>
      </Row>
    </div>
  );
};

export default ModelDetail;


const ModelDetail = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const { getToken, hasRole } = useAuth();
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);
  const [model, setModel] = useState(null);
  const [editing, setEditing] = useState(false);
  const [testInput, setTestInput] = useState('');
  const [testOutput, setTestOutput] = useState('');
  const [testing, setTesting] = useState(false);
  const [isStreaming, setIsStreaming] = useState(false);
  // 添加 system-prompt 相关状态
  const [systemPrompt, setSystemPrompt] = useState('');
  // 添加 markdown 预览相关状态
  const [examplePreviewMode, setExamplePreviewMode] = useState(false);
  // 添加缺失的状态
  const [selectedApiUrl, setSelectedApiUrl] = useState('');
  const [customApiUrl, setCustomApiUrl] = useState(true);

  const isNew = id === 'new';

  useEffect(() => {
    if (!isNew) {
      fetchModel();
    } else {
      setEditing(true);
    }
  }, [id]);

  // 添加缺失的处理函数
  const handleApiUrlChange = (value) => {
    setSelectedApiUrl(value);
    setCustomApiUrl(value === '');
    if (value !== '') {
      form.setFieldsValue({ access_url: value });
    }
  };

  // 在 fetchModel 函数中添加对 API URL 类型的处理
  const fetchModel = async () => {
    setLoading(true);
    try {
      const response = await fetch(`http://localhost:3001/api/models/${id}`);
      if (response.ok) {
        const data = await response.json();
        setModel(data);
        form.setFieldsValue(data);
        
        // 设置 API URL 类型
        const predefinedUrl = predefinedApiUrls.find(item => item.value === data.access_url);
        if (predefinedUrl) {
          setSelectedApiUrl(data.access_url);
          setCustomApiUrl(false);
        } else {
          setSelectedApiUrl('');
          setCustomApiUrl(true);
        }
      } else {
        message.error('获取模型信息失败');
        navigate('/models');
      }
    } catch (error) {
      message.error('网络错误，请稍后重试');
    } finally {
      setLoading(false);
    }
  };

  const handleSave = async (values) => {
    setSaving(true);
    try {
      const url = isNew 
        ? 'http://localhost:3001/api/models'
        : `http://localhost:3001/api/models/${id}`;
      
      const response = await fetch(url, {
        method: isNew ? 'POST' : 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${getToken()}`
        },
        body: JSON.stringify(values)
      });

      if (response.ok) {
        const data = await response.json();
        message.success(isNew ? '模型创建成功' : '模型更新成功');
        
        if (isNew) {
          navigate(`/models/${data.id}`);
        } else {
          setModel(data);
          setEditing(false);
        }
      } else {
        const errorData = await response.json();
        message.error(errorData.error || '保存失败');
      }
    } catch (error) {
      message.error('网络错误，请稍后重试');
    } finally {
      setSaving(false);
    }
  };

  const handleTest = async () => {
    if (!testInput.trim()) {
      message.warning('请输入测试内容');
      return;
    }
  
    const currentFormValues = form.getFieldsValue();
    const accessUrl = currentFormValues.access_url || model?.access_url;
    const accessKey = currentFormValues.access_key || model?.access_key;
    const modelName = currentFormValues.model_name || model?.model_name;
    const modelType = currentFormValues.model_type || model?.model_type;
  
    if (!accessUrl || !accessKey || !modelName) {
      const missingFields = [];
      if (!accessUrl) missingFields.push('API URL');
      if (!accessKey) missingFields.push('API Key');
      if (!modelName) missingFields.push('模型名称');
      
      const errorMsg = `请先配置完整的模型信息，缺少：${missingFields.join('、')}`;
      message.error(errorMsg);
      setTestOutput(`配置错误: ${errorMsg}`);
      return;
    }
  
    if (modelType !== 'text') {
      const warningMsg = '当前仅支持文本模型的测试';
      message.warning(warningMsg);
      setTestOutput(`不支持的模型类型: ${modelType}\n${warningMsg}`);
      return;
    }
  
    setTesting(true);
    setIsStreaming(true);
    setTestOutput('');
  
    try {
      // 构建messages数组，如果有system-prompt则添加
      const messages = [];
      
      // 添加system消息（如果有）
      if (systemPrompt.trim()) {
        messages.push({
          role: 'system',
          content: systemPrompt
        });
      }
      
      // 添加用户消息
      messages.push({
        role: 'user',
        content: testInput
      });
      
      const requestBody = {
        model: modelName,
        messages: messages,
        stream: true,
        temperature: 0.7,
        max_tokens: 1000
      };

      const requestUrl = `${accessUrl}/chat/completions`;
      setTestOutput('正在连接API...\n\n');

      const response = await fetch(requestUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${accessKey}`
        },
        body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
        setIsStreaming(false);
        const errorText = await response.text();
        
        let errorMessage = 'API调用失败';
        try {
          const errorJson = JSON.parse(errorText);
          errorMessage = errorJson.error?.message || errorJson.message || errorMessage;
        } catch {
          errorMessage = `HTTP ${response.status}: ${response.statusText}`;
        }
        
        setTestOutput(`## 测试失败\n\n**错误信息:** ${errorMessage}\n\n**状态码:** ${response.status}\n\n**请检查:**\n- API URL 是否正确\n- API Key 是否有效\n- 模型名称是否正确\n- 网络连接是否正常`);
        message.error(errorMessage);
        return;
      }

      const reader = response.body.getReader();
      const decoder = new TextDecoder();
      let accumulatedContent = '';

      setTestOutput('## 测试结果\n\n');

      while (true) {
        const { done, value } = await reader.read();
        
        if (done) {
          setIsStreaming(false);
          break;
        }
        
        const chunk = decoder.decode(value, { stream: true });
        const lines = chunk.split('\n');
        
        for (const line of lines) {
          if (line.startsWith('data: ')) {
            const data = line.slice(6).trim();
            
            if (data === '[DONE]') {
              setIsStreaming(false);
              continue;
            }
            
            try {
              const parsed = JSON.parse(data);
              const content = parsed.choices?.[0]?.delta?.content;
              
              if (content) {
                accumulatedContent += content;
                setTestOutput(accumulatedContent);
              }
            } catch (e) {
              console.warn('JSON解析错误:', e.message);
            }
          }
        }
      }

      if (!accumulatedContent) {
        setTestOutput('模型返回了空响应，请检查输入内容或模型配置。');
        message.warning('模型返回了空响应');
      } else {
        message.success('测试完成');
      }

    } catch (error) {
      console.error('测试失败:', error);
      setIsStreaming(false);
      setTestOutput(`## 网络错误\n\n**错误信息:** ${error.message}\n\n**可能原因:**\n- 网络连接问题\n- CORS跨域限制\n- API服务不可用\n- 请求超时`);
      message.error(`网络错误: ${error.message}`);
    } finally {
      setTesting(false);
    }
  };

  // 处理媒体文件上传
  const handleMediaUpload = (file) => {
    // 验证文件类型
    const isImage = file.type.startsWith('image/');
    const isVideo = file.type.startsWith('video/');
    
    if (!isImage && !isVideo) {
      message.error('只支持图片或视频文件!');
      return Upload.LIST_IGNORE;
    }
    
    // 文件大小限制 (10MB)
    const isLt10M = file.size / 1024 / 1024 < 10;
    if (!isLt10M) {
      message.error('文件大小不能超过10MB!');
      return Upload.LIST_IGNORE;
    }
    
    // 设置文件和类型
    setMediaFiles([file]);
    setMediaType(isImage ? 'image' : 'video');
    
    // 创建预览URL
    const previewUrl = URL.createObjectURL(file);
    setMediaPreview(previewUrl);
    
    // 阻止默认上传行为
    return false;
  };
  
  // 移除媒体文件
  const handleRemoveMedia = () => {
    setMediaFiles([]);
    setMediaType(null);
    if (mediaPreview) {
      URL.revokeObjectURL(mediaPreview);
      setMediaPreview(null);
    }
  };
  
  // 修改后的测试函数
  const handleTest = async () => {
    if (!testInput.trim() && mediaFiles.length === 0) {
      message.warning('请输入测试内容或上传媒体文件');
      return;
    }
  
    const currentFormValues = form.getFieldsValue();
    const accessUrl = currentFormValues.access_url || model?.access_url;
    const accessKey = currentFormValues.access_key || model?.access_key;
    const modelName = currentFormValues.model_name || model?.model_name;
    const modelType = currentFormValues.model_type || model?.model_type;
  
    if (!accessUrl || !accessKey || !modelName) {
      const missingFields = [];
      if (!accessUrl) missingFields.push('API URL');
      if (!accessKey) missingFields.push('API Key');
      if (!modelName) missingFields.push('模型名称');
      
      const errorMsg = `请先配置完整的模型信息，缺少：${missingFields.join('、')}`;
      message.error(errorMsg);
      setTestOutput(`配置错误: ${errorMsg}`);
      return;
    }
  
    if (modelType !== 'text' && modelType !== 'multimodal') {
      const warningMsg = '当前仅支持文本模型和多模态模型的测试';
      message.warning(warningMsg);
      setTestOutput(`不支持的模型类型: ${modelType}\n${warningMsg}`);
      return;
    }
  
    setTesting(true);
    setIsStreaming(true);
    setTestOutput('');
  
    try {
      // 构建messages数组
      const messages = [];
      
      // 添加system消息（如果有）
      if (systemPrompt.trim()) {
        messages.push({
          role: 'system',
          content: systemPrompt
        });
      }
      
      // 如果媒体文件，构建多模态消息
      if (mediaFiles.length > 0 && mediaType) {
        const file = mediaFiles[0];
        const reader = new FileReader();
        
        reader.onload = async (e) => {
          try {
            const base64Data = e.target.result.split(',')[1]; // 移除data:image/jpeg;base64,前缀
            
            // 按照OpenAI的multimodal API格式构建内容
            const content = [
              { type: "text", text: testInput || "请描述这个图像/视频" },
              {
                type: mediaType,
                [mediaType === 'image' ? 'image_url' : 'video_url']: {
                  url: `data:${file.type};base64,${base64Data}`
                }
              }
            ];
            
            messages.push({
              role: 'user',
              content: content
            });
            
            await sendRequest(messages, accessUrl, accessKey, modelName);
          } catch (error) {
            handleTestError(error);
          }
        };
        
        reader.onerror = () => {
          handleTestError(new Error('文件读取失败'));
        };
        
        reader.readAsDataURL(file);
      } else {
        // 纯文本消息
        messages.push({
          role: 'user',
          content: testInput
        });
        
        await sendRequest(messages, accessUrl, accessKey, modelName);
      }
    } catch (error) {
      handleTestError(error);
    }
  };
  
  // 发送请求到API
  const sendRequest = async (messages, accessUrl, accessKey, modelName) => {
    const requestBody = {
      model: modelName,
      messages: messages,
      stream: true,
      temperature: 0.7,
      max_tokens: 1000
    };

    const requestUrl = `${accessUrl}/chat/completions`;
    setTestOutput('正在连接API...\n\n');

    const response = await fetch(requestUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${accessKey}`
      },
      body: JSON.stringify(requestBody)
    });

    if (!response.ok) {
      const errorText = await response.text();
      
      let errorMessage = 'API调用失败';
      try {
        const errorJson = JSON.parse(errorText);
        errorMessage = errorJson.error?.message || errorJson.message || errorMessage;
      } catch {
        errorMessage = `HTTP ${response.status}: ${response.statusText}`;
      }
      
      setIsStreaming(false);
      setTestOutput(`## 测试失败\n\n**错误信息:** ${errorMessage}\n\n**状态码:** ${response.status}\n\n**请检查:**\n- API URL 是否正确\n- API Key 是否有效\n- 模型名称是否正确\n- 网络连接是否正常`);
      message.error(errorMessage);
      return;
    }

    const reader = response.body.getReader();
    const decoder = new TextDecoder();
    let accumulatedContent = '';

    setTestOutput('## 测试结果\n\n');

    while (true) {
      const { done, value } = await reader.read();
      
      if (done) {
        setIsStreaming(false);
        break;
      }
      
      const chunk = decoder.decode(value, { stream: true });
      const lines = chunk.split('\n');
      
      for (const line of lines) {
        if (line.startsWith('data: ')) {
          const data = line.slice(6).trim();
          
          if (data === '[DONE]') {
            setIsStreaming(false);
            continue;
          }
          
          try {
            const parsed = JSON.parse(data);
            const content = parsed.choices?.[0]?.delta?.content;
            
            if (content) {
              accumulatedContent += content;
              setTestOutput(accumulatedContent);
            }
          } catch (e) {
            console.warn('JSON解析错误:', e.message);
          }
        }
      }
    }

    if (!accumulatedContent) {
      setTestOutput('模型返回了空响应，请检查输入内容或模型配置。');
      message.warning('模型返回了空响应');
    } else {
      message.success('测试完成');
    }
  };
  
  // 处理测试错误
  const handleTestError = (error) => {
    console.error('测试失败:', error);
    setIsStreaming(false);
    setTesting(false);
    setTestOutput(`## 网络错误\n\n**错误信息:** ${error.message}\n\n**可能原因:**\n- 网络连接问题\n- CORS跨域限制\n- API服务不可用\n- 请求超时`);
    message.error(`网络错误: ${error.message}`);
  };

  if (loading) {
    return <div style={{ textAlign: 'center', padding: '48px' }}>加载中...</div>;
  }

  return (
    <div>
      {/* 页面头部 */}
      <div style={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center',
        marginBottom: '24px' 
      }}>
        <Title level={2} style={{ margin: 0 }}>
          <RobotOutlined style={{ marginRight: '12px', color: '#1890ff' }} />
          {isNew ? '新增模型' : (editing ? '编辑模型' : model?.name)}
        </Title>
        <Button 
          icon={<ArrowLeftOutlined />} 
          onClick={() => navigate('/models')}
        >
          返回模型库
        </Button>
      </div>

      <Row gutter={[24, 24]}>
        {/* 模型测试 */}
        {!isNew && (
          <Col xs={24} lg={8}>
            <Card title="模型测试" style={{ height: 'fit-content' }} headStyle={{ textAlign: 'left' }}>
              <div style={{ marginBottom: '16px', textAlign: 'left' }}>
                <Text strong>System Prompt：</Text>
                <TextArea
                  rows={3}
                  placeholder="输入system-prompt（可选）..."
                  value={systemPrompt}
                  onChange={(e) => setSystemPrompt(e.target.value)}
                  style={{ marginTop: '8px', marginBottom: '16px' }}
                />
                
                <Text strong>测试输入：</Text>
                <TextArea
                  rows={4}
                  placeholder="请输入测试内容..."
                  value={testInput}
                  onChange={(e) => setTestInput(e.target.value)}
                  style={{ marginTop: '8px' }}
                />
                
                {/* 添加多模态文件上传区域 */}
                {form.getFieldValue('model_type') === 'multimodal' && (
                  <div style={{ marginTop: '16px' }}>
                    <Text strong>多模态文件上传：</Text>
                    <div style={{ marginTop: '8px' }}>
                      <Upload
                        listType="picture-card"
                        fileList={fileList}
                        onPreview={handlePreview}
                        onChange={handleFileChange}
                        beforeUpload={(file) => {
                          // 验证文件类型
                          const isImageOrVideo = file.type.startsWith('image/') || file.type.startsWith('video/');
                          if (!isImageOrVideo) {
                            message.error('只能上传图片或视频文件!');
                            return Upload.LIST_IGNORE;
                          }
                          // 验证文件大小
                          const isLt10M = file.size / 1024 / 1024 < 10;
                          if (!isLt10M) {
                            message.error('文件必须小于10MB!');
                            return Upload.LIST_IGNORE;
                          }
                          return false; // 阻止自动上传
                        }}
                        maxCount={1}
                      >
                        {fileList.length >= 1 ? null : (
                          <div>
                            <PlusOutlined />
                            <div style={{ marginTop: 8 }}>上传</div>
                          </div>
                        )}
                      </Upload>
                      <Modal
                        open={previewOpen}
                        title={previewTitle}
                        footer={null}
                        onCancel={() => setPreviewOpen(false)}
                      >
                        {previewImage.startsWith('data:image/') ? (
                          <img alt="预览图片" style={{ width: '100%' }} src={previewImage} />
                        ) : (
                          <video 
                            controls 
                            style={{ width: '100%' }} 
                            src={previewImage}
                          >
                            您的浏览器不支持视频标签
                          </video>
                        )}
                      </Modal>
                    </div>
                  </div>
                )}
              </div>
              
              <Button 
                type="primary" 
                icon={<SendOutlined />}
                loading={testing}
                onClick={handleTest}
                style={{ marginBottom: '16px', width: '100%' }}
              >
                发送测试
              </Button>

              <div style={{ marginTop: '16px' }}>
                <div style={{ marginTop: '8px' }}>
                  <TestResultDisplay 
                    output={testOutput}
                    isLoading={testing}
                    isStreaming={isStreaming}
                    onClear={() => setTestOutput('')}
                  />
                </div>
              </div>
            </Card>
          </Col>
        )}

        {/* 模型信息表单 */}
        <Col xs={24} lg={16}>
          <Card 
            title="模型信息"
            headStyle={{ textAlign: 'left' }}
            extra={
              !isNew && hasRole(['admin', 'developer']) && (
                <Space>
                  {/* ... existing code ... */}
                </Space>
              )
            }
          >
            <Form
              form={form}
              layout="vertical"
              onFinish={handleSave}
              disabled={!editing && !isNew}
            >
              <Row gutter={[16, 0]}>
                <Col xs={24} md={12}>
                  <Form.Item
                    label="模型名称"
                    name="name"
                    rules={[{ required: true, message: '请输入模型名称' }]}
                  >
                    <Input placeholder="请输入模型名称" />
                  </Form.Item>
                </Col>
                <Col xs={24} md={12}>
                  <Form.Item
                    label="模型类型"
                    name="model_type"
                    rules={[{ required: true, message: '请选择模型类型' }]}
                  >
                    <Select 
                      placeholder="请选择模型类型"
                      onChange={handleModelTypeChange}
                    >
                      <Option value="text">文本</Option>
                      <Option value="audio">语音</Option>
                      <Option value="multimodal">多模态</Option>
                      <Option value="text2image">文生图</Option>
                      <Option value="embedding">嵌入模型</Option>
                    </Select>
                  </Form.Item>
                </Col>
              </Row>
              
              <Row gutter={16}>
                <Col xs={24} sm={12}>
                  <Form.Item
                    name="provider"
                    label="发布机构"
                    rules={[{ required: true, message: '请输入发布机构' }]}
                  >
                    <Input placeholder="请输入发布机构" />
                  </Form.Item>
                </Col>
                <Col xs={24} sm={12}>
                  <Form.Item
                    name="model_name"
                    label="模型名称(Model Name)"
                    rules={[{ required: true, message: '请输入模型名称' }]}
                  >
                    <Input placeholder="OpenAI API中使用的模型名称，如gpt-4-vision-preview" />
                  </Form.Item>
                </Col>
              </Row>

              <Row gutter={16}>
                <Col xs={24} sm={12}>
                  <Form.Item
                    name="api_url_type"
                    label="API URL类型"
                    rules={[{ required: true, message: '请选择API URL类型' }]}
                  >
                    <Select
                      placeholder="请选择API URL类型"
                      options={[
                        { value: 'standard', label: '标准URL' },
                        { value: 'custom', label: '自定义URL' }
                      ]}
                      onChange={(value) => {
                        if (value === 'standard') {
                          form.setFieldsValue({ access_url: 'https://api.openai.com/v1' });
                        } else {
                          form.setFieldsValue({ access_url: '' });
                        }
                      }}
                    />
                  </Form.Item>
                </Col>
                <Col xs={24} sm={12}>
                  <Form.Item
                    name="access_url"
                    label=
                    rules={[{ required: true, message: '请输入API地址' }]}
                  >
                    <Input 
                      placeholder="https://api.example.com/v1/chat" 
                      disabled={!customApiUrl}
                    />
                  </Form.Item>
                </Col>
              </Row>

              <Form.Item
                label="API Key"
                name="access_key"
              >
                <Input.Password placeholder="请输入API密钥" />
              </Form.Item>

              <Form.Item
                label="模型描述"
                name="description"
              >
                {!editing ? (
                  <MarkdownRenderer
                    content={form.getFieldValue('description') || ''}
                    isStreaming={false}
                  />
                ) : (
                  <TextArea 
                    rows={4} 
                    placeholder="请输入模型的详细描述，包括功能特点、适用场景等（支持Markdown语法）"
                  />
                )}
              </Form.Item>

              <Row gutter={16}>
                <Col xs={24} sm={12}>
                  <Form.Item
                    label="输入格式"
                    name="input_format"
                  >
                    <TextArea 
                      rows={3} 
                      placeholder="描述模型的输入格式，例如JSON结构等"
                    />
                  </Form.Item>
                </Col>
                <Col xs={24} sm={12}>
                  <Form.Item
                    label="输出格式"
                    name="output_format"
                  >
                    <TextArea 
                      rows={3} 
                      placeholder="描述模型的输出格式"
                    />
                  </Form.Item>
                </Col>
              </Row>

              <Form.Item
                label="使用示例"
                name="example"
              >
                <div style={{ position: 'relative' }}>
                  {!examplePreviewMode ? (
                    <TextArea 
                      rows={4} 
                      placeholder="提供模型使用的具体示例（支持Markdown语法）"
                    />
                  ) : (
                    <MarkdownRenderer
                      content={form.getFieldValue('example') || ''}
                      isStreaming={false}
                    />
                  )}
                  <Button
                    onClick={() => setExamplePreviewMode(!examplePreviewMode)}
                    size="small"
                    style={{
                      position: 'absolute',
                      top: '8px',
                      right: '8px',
                      zIndex: 1
                    }}
                  >
                    {examplePreviewMode ? '编辑' : '预览'}
                  </Button>
                </div>
              </Form.Item>

              {(editing || isNew) && (
                <Form.Item>
                  <Space>
                    <Button 
                      type="primary" 
                      htmlType="submit" 
                      icon={<SaveOutlined />}
                      loading={saving}
                    >
                      {isNew ? '创建模型' : '保存修改'}
                    </Button>
                    <Button onClick={() => {
                      if (isNew) {
                        navigate('/models');
                      } else {
                        setEditing(false);
                        form.resetFields();
                        form.setFieldsValue(model);
                      }
                    }}>
                      取消
                    </Button>
                  </Space>
                </Form.Item>
              )}
            </Form>
            </Card>
          </Col>
      </Row>
    </div>
  );
};

export default ModelDetail;


const [fileList, setFileList] = useState([]);
const [previewOpen, setPreviewOpen] = useState(false);
const [previewImage, setPreviewImage] = useState('');
const [previewTitle, setPreviewTitle] = useState('');
const fileInputRef = useRef(null);

// 添加文件预览处理函数
const handlePreview = async (file) => {
  if (!file.url && !file.preview) {
    file.preview = await getBase64(file.originFileObj);
  }
  setPreviewImage(file.url || file.preview);
  setPreviewOpen(true);
  setPreviewTitle(file.name || file.url.substring(file.url.lastIndexOf('/') + 1));
};

// 添加文件列表更改处理函数
const handleFileChange = ({ fileList: newFileList }) => {
  // 限制只能上传一个文件
  if (newFileList.length > 1) {
    message.warning('只能上传一个文件');
    return;
  }
  setFileList(newFileList);
};

// 添加文件删除处理函数
const handleFileRemove = () => {
  setFileList([]);
};

// 文件转Base64辅助函数
const getBase64 = (file) => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => resolve(reader.result);
    reader.onerror = error => reject(error);
  });
};

// 修改模型类型切换处理函数
const handleModelTypeChange = (value) => {
  form.setFieldsValue({ model_type: value });
  // 当切换到非多模态模型时，清空已上传的文件
  if (value !== 'multimodal') {
    setFileList([]);
  }
};

// 修改handleTest函数支持多模态测试
const handleTest = async () => {
  const currentFormValues = form.getFieldsValue();
  const accessUrl = currentFormValues.access_url || model?.access_url;
  const accessKey = currentFormValues.access_key || model?.access_key;
  const modelName = currentFormValues.model_name || model?.model_name;
  const modelType = currentFormValues.model_type || model?.model_type;

  if (!accessUrl || !accessKey || !modelName) {
    const missingFields = [];
    if (!accessUrl) missingFields.push('API URL');
    if (!accessKey) missingFields.push('API Key');
    if (!modelName) missingFields.push('模型名称');
    
    const errorMsg = `请先配置完整的模型信息，缺少：${missingFields.join('、')}`;
    message.error(errorMsg);
    setTestOutput(`配置错误: ${errorMsg}`);
    return;
  }

  // 修改：支持多模态模型的测试
  if (modelType !== 'text' && modelType !== 'multimodal') {
    const warningMsg = '当前仅支持文本模型和多模态模型的测试';
    message.warning(warningMsg);
    setTestOutput(`不支持的模型类型: ${modelType}
${warningMsg}`);
    return;
  }
  
  // 检查多模态模型是否上传了文件
  if (modelType === 'multimodal' && fileList.length === 0 && testInput.trim() === '') {
    const warningMsg = '多模态模型测试需要提供文本输入或上传图片/视频文件';
    message.warning(warningMsg);
    setTestOutput(`测试错误: ${warningMsg}`);
    return;
  }

  setTesting(true);
  setIsStreaming(true);
  setTestOutput('');

  try {
    // 构建messages数组，如果有system-prompt则添加
    const messages = [];
    
    // 添加system消息（如果有）
    if (systemPrompt.trim()) {
      messages.push({
        role: 'system',
        content: systemPrompt
      });
    }
    
    // 检查多模态模型是否上传了文件
    if (modelType === 'multimodal' && fileList.length === 0 && testInput.trim() === '') {
      const warningMsg = '多模态模型测试需要提供文本输入或上传图片/视频文件';
      message.warning(warningMsg);
      setTestOutput(`测试错误: ${warningMsg}`);
      return;
    }
  
    setTesting(true);
    setIsStreaming(true);
    setTestOutput('');
  
    try {
      // 构建messages数组
      const messages = [];
      
      // 添加system消息（如果有）
      if (systemPrompt.trim()) {
        messages.push({
          role: 'system',
          content: systemPrompt
        });
      }
      
      // 如果有媒体文件，构建多模态消息
      if (mediaFiles.length > 0 && mediaType) {
        const file = mediaFiles[0];
        const reader = new FileReader();
        
        reader.onload = async (e) => {
          try {
            const base64Data = e.target.result.split(',')[1]; // 移除data:image/jpeg;base64,前缀
            
            // 按照OpenAI的multimodal API格式构建内容
            const content = [
              { type: "text", text: testInput || "请描述这个图像/视频" },
              {
                type: mediaType,
                [mediaType === 'image' ? 'image_url' : 'video_url']: {
                  url: `data:${file.type};base64,${base64Data}`
                }
              }
            ];
            
            messages.push({
              role: 'user',
              content: content
            });
            
            await sendRequest(messages, accessUrl, accessKey, modelName);
          } catch (error) {
            handleTestError(error);
          }
        };
        
        reader.onerror = () => {
          handleTestError(new Error('文件读取失败'));
        };
        
        reader.readAsDataURL(file);
      } else {
        // 纯文本消息
        messages.push({
          role: 'user',
          content: testInput
        });
        
        await sendRequest(messages, accessUrl, accessKey, modelName);
      }
    } catch (error) {
      handleTestError(error);
    }
  };

  if (loading) {
    return <div style={{ textAlign: 'center', padding: '48px' }}>加载中...</div>;
  }

  return (
    <div>
      {/* 页面头部 */}
      <div style={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center',
        marginBottom: '24px' 
      }}>
        <Title level={2} style={{ margin: 0 }}>
          <RobotOutlined style={{ marginRight: '12px', color: '#1890ff' }} />
          {isNew ? '新增模型' : (editing ? '编辑模型' : model?.name)}
        </Title>
        <Button 
          icon={<ArrowLeftOutlined />} 
          onClick={() => navigate('/models')}
        >
          返回模型库
        </Button>
      </div>

      <Row gutter={[24, 24]}>
        {/* 模型测试 */}
        {!isNew && (
          <Col xs={24} lg={8}>
            <Card title="模型测试" style={{ height: 'fit-content' }} headStyle={{ textAlign: 'left' }}>
              <div style={{ marginBottom: '16px', textAlign: 'left' }}>
                <Text strong>System Prompt：</Text>
                <TextArea
                  rows={3}
                  placeholder="输入system-prompt（可选）..."
                  value={systemPrompt}
                  onChange={(e) => setSystemPrompt(e.target.value)}
                  style={{ marginTop: '8px', marginBottom: '16px' }}
                />
                
                <Text strong>测试输入：</Text>
                <TextArea
                  rows={4}
                  placeholder="请输入测试内容..."
                  value={testInput}
                  onChange={(e) => setTestInput(e.target.value)}
                  style={{ marginTop: '8px' }}
                />
                
                {/* 添加多模态文件上传区域 */}
                {form.getFieldValue('model_type') === 'multimodal' && (
                  <div style={{ marginTop: '16px' }}>
                    <Text strong>多模态文件上传：</Text>
                    <div style={{ marginTop: '8px' }}>
                      <Upload
                        listType="picture-card"
                        fileList={fileList}
                        onPreview={handlePreview}
                        onChange={handleFileChange}
                        beforeUpload={(file) => {
                          // 验证文件类型
                          const isImageOrVideo = file.type.startsWith('image/') || file.type.startsWith('video/');
                          if (!isImageOrVideo) {
                            message.error('只能上传图片或视频文件!');
                            return Upload.LIST_IGNORE;
                          }
                          // 验证文件大小
                          const isLt10M = file.size / 1024 / 1024 < 10;
                          if (!isLt10M) {
                            message.error('文件必须小于10MB!');
                            return Upload.LIST_IGNORE;
                          }
                          return false; // 阻止自动上传
                        }}
                        maxCount={1}
                      >
                        {fileList.length >= 1 ? null : (
                          <div>
                            <PlusOutlined />
                            <div style={{ marginTop: 8 }}>上传</div>
                          </div>
                        )}
                      </Upload>
                      <Modal
                        open={previewOpen}
                        title={previewTitle}
                        footer={null}
                        onCancel={() => setPreviewOpen(false)}
                      >
                        {previewImage.startsWith('data:image/') ? (
                          <img alt="预览图片" style={{ width: '100%' }} src={previewImage} />
                        ) : (
                          <video 
                            controls 
                            style={{ width: '100%' }} 
                            src={previewImage}
                          >
                            您的浏览器不支持视频标签
                          </video>
                        )}
                      </Modal>
                    </div>
                  </div>
                )}
              </div>
              
              <Button 
                type="primary" 
                icon={<SendOutlined />}
                loading={testing}
                onClick={handleTest}
                style={{ marginBottom: '16px', width: '100%' }}
              >
                发送测试
              </Button>

              <div style={{ marginTop: '16px' }}>
                <div style={{ marginTop: '8px' }}>
                  <TestResultDisplay 
                    output={testOutput}
                    isLoading={testing}
                    isStreaming={isStreaming}
                    onClear={() => setTestOutput('')}
                  />
                </div>
              </div>
            </Card>
          </Col>
        )}

        {/* 模型信息表单 */}
        <Col xs={24} lg={16}>
          <Card 
            title="模型信息"
            headStyle={{ textAlign: 'left' }}
            extra={
              !isNew && hasRole(['admin', 'developer']) && (
                <Space>
                  {/* ... existing code ... */}
                </Space>
              )
            }
          >
            <Form
              form={form}
              layout="vertical"
              onFinish={handleSave}
              disabled={!editing && !isNew}
            >
              <Row gutter={[16, 0]}>
                <Col xs={24} md={12}>
                  <Form.Item
                    label="模型名称"
                    name="name"
                    rules={[{ required: true, message: '请输入模型名称' }]}
                  >
                    <Input placeholder="请输入模型名称" />
                  </Form.Item>
                </Col>
                <Col xs={24} md={12}>
                  <Form.Item
                    label="模型类型"
                    name="model_type"
                    rules={[{ required: true, message: '请选择模型类型' }]}
                  >
                    <Select 
                      placeholder="请选择模型类型"
                      onChange={handleModelTypeChange}
                    >
                      <Option value="text">文本</Option>
                      <Option value="audio">语音</Option>
                      <Option value="multimodal">多模态</Option>
                      <Option value="text2image">文生图</Option>
                      <Option value="embedding">嵌入模型</Option>
                    </Select>
                  </Form.Item>
                </Col>
              </Row>
              
              <Row gutter={16}>
                <Col xs={24} sm={12}>
                  <Form.Item
                    name="provider"
                    label="发布机构"
                    rules={[{ required: true, message: '请输入发布机构' }]}
                  >
                    <Input placeholder="请输入发布机构" />
                  </Form.Item>
                </Col>
                <Col xs={24} sm={12}>
                  <Form.Item
                    name="model_name"
                    label="模型名称(Model Name)"
                    rules={[{ required: true, message: '请输入模型名称' }]}
                  >
                    <Input placeholder="OpenAI API中使用的模型名称，如gpt-4-vision-preview" />
                  </Form.Item>
                </Col>
              </Row>

              <Row gutter={16}>
                <Col xs={24} sm={12}>
                  <Form.Item
                    name="api_url_type"
                    label="API URL类型"
                    rules={[{ required: true, message: '请选择API URL类型' }]}
                  >
                    <Select
                      placeholder="请选择API URL类型"
                      options={[
                        { value: 'standard', label: '标准URL' },
                        { value: 'custom', label: '自定义URL' }
                      ]}
                      onChange={(value) => {
                        if (value === 'standard') {
                          form.setFieldsValue({ access_url: 'https://api.openai.com/v1' });
                        } else {
                          form.setFieldsValue({ access_url: '' });
                        }
                      }}
                    />
                  </Form.Item>
                </Col>
                <Col xs={24} sm={12}>
                  <Form.Item
                    name="access_url"
                    label=
                    rules={[{ required: true, message: '请输入API地址' }]}
                  >
                    <Input 
                      placeholder="https://api.example.com/v1/chat" 
                      disabled={!customApiUrl}
                    />
                  </Form.Item>
                </Col>
              </Row>

              <Form.Item
                label="API Key"
                name="access_key"
              >
                <Input.Password placeholder="请输入API密钥" />
              </Form.Item>

              <Form.Item
                label="模型描述"
                name="description"
              >
                {!editing ? (
                  <MarkdownRenderer
                    content={form.getFieldValue('description') || ''}
                    isStreaming={false}
                  />
                ) : (
                  <TextArea 
                    rows={4} 
                    placeholder="请输入模型的详细描述，包括功能特点、适用场景等（支持Markdown语法）"
                  />
                )}
              </Form.Item>

              <Row gutter={16}>
                <Col xs={24} sm={12}>
                  <Form.Item
                    label="输入格式"
                    name="input_format"
                  >
                    <TextArea 
                      rows={3} 
                      placeholder="描述模型的输入格式，例如JSON结构等"
                    />
                  </Form.Item>
                </Col>
                <Col xs={24} sm={12}>
                  <Form.Item
                    label="输出格式"
                    name="output_format"
                  >
                    <TextArea 
                      rows={3} 
                      placeholder="描述模型的输出格式"
                    />
                  </Form.Item>
                </Col>
              </Row>

              <Form.Item
                label="使用示例"
                name="example"
              >
                <div style={{ position: 'relative' }}>
                  {!examplePreviewMode ? (
                    <TextArea 
                      rows={4} 
                      placeholder="提供模型使用的具体示例（支持Markdown语法）"
                    />
                  ) : (
                    <MarkdownRenderer
                      content={form.getFieldValue('example') || ''}
                      isStreaming={false}
                    />
                  )}
                  <Button
                    onClick={() =>